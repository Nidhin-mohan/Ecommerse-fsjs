openapi: "3.0.0"
info:
  title: Ecommerse API
  description: API for Ecommerse website
  version: 1.1.0
 

servers:
  - url: "{protocol}://{url}/api/{version}"
    description: for local host 
    variables:
      version:
        enum:
          - v1
          - v2
        default: v1
      url:
        enum:
          - localhost:4000
          - ecommerse-fsjs-production.up.railway.app
        default: localhost:4000
      protocol:
        enum:
          - http
          - https
        default: http

components:
  securitySchemes:
    cookieAuth:
      type: apiKey
      in: cookie
      name: token
    BearerAuth:
      type: http
      scheme: bearer

paths:
  /auth/signup:
    post:
      tags:
        - User
      summary: signup a new user. required files are - name, email, password 
      requestBody:
        content:
          application/json:
            schema:
              type: object
              required:
                - name
                - email
                - password
              properties:
                name:
                  type: string
                  required: true
                email:
                  type: string
                password:
                  type: string               
      responses:
        200:
          description: All good success
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                  token:
                    type: string
                  user:
                    type: object
                    properties:
                      name:
                        type: string
                      email:
                        type: string
                      role:
                        type: string                     
                      _id:
                        type: string
                      createdAt:
                        type: string
        400:
          description: Bad request
        500:
          description: internal server error

  /auth/login:
    post:
      tags:
        - User
      summary: login a new user. required files are -  email and password. Also adds httpOnly cookie in browser. It sends token in response too.
      requestBody:
        content:
          application/json:
            schema:
              type: object
              required:
                - email
                - password
              properties:
                email:
                  type: string
                password:
                  type: string
      responses:
        200:
          description: All good success
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                  token:
                    type: string
                  user:
                    type: object
                    properties:
                      name:
                        type: string
                      email:
                        type: string
                      role:
                        type: string                    
                      _id:
                        type: string
                      createdAt:
                        type: string
        400:
          description: Bad request
        500:
          description: internal server error

  /auth/logout:
    get:
      tags:
        - User
      summary: get request to logout the user. Also removes httpOnly cookies 
      responses:
        200:
          description: All good success
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                  message:
                    type: string
                  
        400:
          description: Bad request
        500:
          description: internal server error

  /auth/password/forgot:
    post:
      tags:
        - User
      summary: sends an email with link to forgot password. Contains the token for user validation. Public hosted version will not send email to your account. Use your own SMTP details to access this feature on local project
      requestBody:
        content:
          application/json:
            schema:
              type: object
              required:
                - email
              properties:
                email:
                  type: string
      responses:
        200:
          description: All good success
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                  message:
                    type: string
        400:
          description: Bad request
        500:
          description: internal server error

  /auth/password/{resetToken}:
    post:
      tags:
        - User
      summary: Allows user to reset password, validated based on token. send password and confirm password fields
      parameters:
        - name: resetToken
          in: path
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              type: object
              required:
                - password
                - confirmPassword
              properties:
                password:
                  type: string
                confirmPassword:
                  type: string
      responses:
        200:
          description: All good success
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                  token:
                    type: string
                  user:
                    type: object
                    properties:
                      name:
                        type: string
                      email:
                        type: string
                      role:
                        type: string
                      photo:
                        type: object
                        properties:
                          id:
                            type: string
                          secure_url:
                            type: string
                      _id:
                        type: string
                      createdAt:
                        type: string
        400:
          description: Bad request
        500:
          description: internal server error

  /auth/profile:
    get:
      tags:
        - User
      summary: Gets all details about logged in user. Send token in cookies as named token or send Bearer Auth
      requestBody:
      responses:
        200:
          description: All good success
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                  user:
                    type: object
                    properties:
                      name:
                        type: string
                      email:
                        type: string
                      role:
                        type: string
                      _id:
                        type: string
                      createdAt:
                        type: string
        400:
          description: Bad request
        500:
          description: internal server error
  
  /auth/password/change:
    post:
      tags:
        - User
      summary: User can update the password if he is logged in. Send oldPassword and newPassword
      requestBody:
        content:
          application/json:
            schema:
              type: object
              required:
                - oldPassword
                - newPassword
              properties:
                oldPassword:
                  type: string
                newPassword:
                  type: string
      responses:
        200:
          description: All good success
          content:
            application/json:
              schema:
                type: object
                properties:
                  token:
                    type: string
                  user:
                    type: object
                    properties:
                      name:
                        type: string
                      email:
                        type: string
                      role:
                        type: string                      
                      _id:
                        type: string
                      createdAt:
                        type: string
        400:
          description: Bad request
        500:
          description: internal server error

  /auth/profile/update:
    put:
      tags:
        - User
      summary: User can update the name, emails and photo. Photo is optional
      requestBody:
        content:
          application/json:
            schema:
              type: object
              required:
                - name
                - email
              properties:
                name:
                  type: string
                email:
                  type: string               
      responses:
        200:
          description: All good success
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                  
        400:
          description: Bad request
        500:
          description: internal server error        

  /auth/admin/users:
    get:
      tags:
        - Admin
      summary: If user is admin, response will get array of all users
      requestBody:
        
      responses:
        200:
          description: All good success
          content:
            application/json:
              schema:
                type: array
                items:
                  type: object
                  properties:
                    user:
                      type: object
                      properties:
                        name:
                          type: string
                        email:
                          type: string
                        role:
                          type: string                    
                        _id:
                          type: string
                        createdAt:
                          type: string
                  
        400:
          description: Bad request
        500:
          description: internal server error

  /auth/admin/users/{id}:
    get:
      tags:
        - Admin
      summary: If user is admin, response will get details of 1 user
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      requestBody:
        
      responses:
        200:
          description: All good success
          content:
            application/json:
              schema:
                  type: object
                  properties:
                    user:
                      type: object
                      properties:
                        name:
                          type: string
                        email:
                          type: string
                        role:
                          type: string                      
                        _id:
                          type: string
                        createdAt:
                          type: string
                  
        400:
          description: Bad request
        500:
          description: internal server error
    put:
      tags:
        - Admin
      summary: If user is admin, he can update mentioned fields in user
      parameters:
        - name: id
          in: path
          required: true
     
      requestBody:
         content:
          application/json:
            schema:
              type: object
              required:
                - name
                - email
              properties:
                name: 
                  type: string
                  required: true
                email:
                  type: string
                  required: true
                role:
                  type: string
                  enum: [USER, ADMIN, MODERATOR]
               
      responses:
        200:
          description: All good success
          content:
            application/json:
              schema:
                  type: object
                  properties:
                    success:
                      type: boolean
                  
        400:
          description: Bad request
        500:
          description: internal server error
    delete:
      tags:
        - Admin
      summary: If user is admin, delete the user with given id
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      requestBody: 
      responses:
        200:
          description: All good success
          content:
            application/json:
              schema:
                  type: object
                  properties:
                    success:
                      type: boolean
                  
        400:
          description: Bad request
        500:
          description: internal server error 

  
  /collections:
    get:
      tags:
        - Collection
      summary: get all collections available in database and send it as responce
      requestBody:
        
                
      responses:
        200:
          description: All good success
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                  
                  collection:
                    type: object
                    properties:
                      _id:
                        type: string
                      name:
                        type: string
                      
        400:
          description: Bad request
        500:
          description: internal server error

  /collection:
    post:
      tags:
        - Collection
      summary: Create a new collection
      requestBody:
        content:
          application/json:
            schema:
              type: object
              required:
                - name
              properties:
                name:
                  type: string
                        
      responses:
        200:
          description: All good success
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                  
                  collection:
                    type: object
                    properties:
                      _id:
                        type: string
                      name:
                        type: string
                      
        400:
          description: Bad request
        500:
          description: internal server error

  /collection/{id}:
    put:
      tags:
        - Collection
      summary: Update an existing collection
      parameters:
        - name: id
          in: path
          required: true
      requestBody:
        content:
          application/json:
            schema:
              type: object
              required:
                - name
              properties:
                name:
                  type: string
                        
      responses:
        200:
          description: All good success
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean                  
                  collection:
                    type: object
                    properties:
                      _id:
                        type: string
                      name:
                        type: string
    delete:
      tags:
        - Collection
      summary: Delete an existing collection
      parameters:
        - name: id
          in: path
          required: true
      requestBody:                      
      responses:
        200:
          description: All good success
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                      
        400:
          description: Bad request
        500:
          description: internal server error


  
  /products:
    get:
      tags:
        - Product
      summary: A simple get request will give you all available products
      requestBody:
        
      responses:
        200:
          description: All good success
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                  filteredProductNumber:
                    type: number
                  totalcountProduct:
                    type: number
                  products:
                    type: array
                    items:
                      type: object
                      properties:
                        _id:
                          type: string
                        name:
                          type: string
                        price: 
                          type: number
                        description: 
                          type: string
                        collectionId: 
                          type: string
                        brand: 
                          type: string
                        ratings: 
                          type: number
                        numberOfReviews: 
                          type: number
                        user: 
                          type: string
                        photos: 
                          type: array
                          items:
                            type: object
                            properties:
                              id:
                                type: string
                              secure_url:
                                type: string
                        reviews: 
                          type: array
                          items:
                            type: object
                            properties:
                              id:
                                type: string
                              comment:
                                type: string
                              user:
                                type: string
                              name:
                                type: string
                              rating:
                                type: number
        400:
          description: Bad request
        500:
          description: internal server error

  
  /product/{id}:
    get:
      tags:
        - Product
      summary: Get a single product
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      requestBody:
        
      responses:
        200:
          description: All good success
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                  product:
                    type: object
                    properties:
                      _id:
                        type: string
                      name:
                        type: string
                      price: 
                        type: number
                      description: 
                        type: string
                      collectionId: 
                        type: string
                      brand: 
                        type: string
                      ratings: 
                        type: number
                      numberOfReviews: 
                        type: number
                      user: 
                        type: string
                      photos: 
                        type: array
                        items:
                          type: object
                          properties:
                            id:
                              type: string
                            secure_url:
                              type: string
                      reviews: 
                        type: array
                        items:
                          type: object
                          properties:
                            id:
                              type: string
                            comment:
                              type: string
                            user:
                              type: string
                            name:
                              type: string
                            rating:
                              type: number
        400:
          description: Bad request
        500:
          description: internal server error
        
  /admin/product:
    post:
      tags:
        - Admin
      summary: If admin, Add a product
      parameters:
      requestBody:
        content:
          multipart/form-data:
            schema:
              type: object
              required:
                - name
                - price
                - description
                - collectionId
                - stock
                - brand
                - photos
              properties:
                name:
                  type: string
                  required: true
                price:
                  type: number
                  required: true
                description:
                  type: string
                  required: true
                collectionId:
                  type: string
                  required: true 
                stock:
                  type: number
                  required: true
                brand:
                  type: string
                  required: true
                photos:
                  in: formData
                  description: The uploaded photos
                  type: file
                  format: binary
        
      responses:
        200:
          description: All good success
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                  product:
                    type: object
                    properties:
                      _id:
                        type: string
                      name:
                        type: string
                      price: 
                        type: number
                      description: 
                        type: string
                      collectionId: 
                        type: string
                      brand: 
                        type: string
                      ratings: 
                        type: number
                      numberOfReviews: 
                        type: number
                      user: 
                        type: string
                      photos: 
                        type: array
                        items:
                          type: object
                          properties:
                            id:
                              type: string
                            secure_url:
                              type: string
                      reviews: 
                        type: array
                        items:
                          type: object
                          properties:
                            id:
                              type: string
                            comment:
                              type: string
                            user:
                              type: string
                            name:
                              type: string
                            rating:
                              type: number
        400:
          description: Bad request
        500:
          description: internal server error

  